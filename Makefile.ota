#Changelog
# This Mac SDK installed in volume as the wiki
# http://www.esp8266.com/wiki/doku.php?id=setup-osx-compiler-esp8266
# The Makefile is OSX. but will work mostly on linux
# Changed the variables to include the header file directory
# Added global var for the XTENSA tool root
#
# This make file still needs some work.
#
#
# Output directors to store intermediate compiled files
# relative to the project directory
BUILD_BASE	= build
FW_BASE		= firmware

USE_HEATSHRINK ?= yes
GZIP_COMPRESSION ?= yes

# Base directory for the compiler
XTENSA_TOOLS_ROOT ?= /Volumes/esp-open-sdk/xtensa-lx106-elf/bin

# base directory of the ESP8266 SDK package, absolute
SDK_BASE        ?= /Volumes/esp-open-sdk/sdk


# Needed for new bootloader/SDK versions
APPGEN_TOOL	?= gen_appbin.py
OTA		?= true

# Bootloader and defaults
BLANK		= blank.bin
ESP_BOOT_VER	?= new

BOOTLOADER      ?= boot_v1.4\(b1\).bin
BOOT_MODE 		= 2

#Esptool.py path and port
ESPTOOL		?= /Volumes/esp-open-sdk/esptool/esptool.py
ESPPORT		?= /dev/tty.wchusbserial14*

# name for the target project
TARGET		= thebutton

#Position and maximum length of espfs in flash memory
ESPFS_POS = 0x12000
ESPFS_SIZE = 0x2E000

# Hardware info
ESP_FLASH_SIZE	?= 512
ESP_SPI_SIZE	?= 0
ESP_FLASH_MODE 	?= 0 
ESP_FLASH_FREQ_DIV ?= 0

ESP_IPADDRESS	?= 192.168.4.1

# which modules (subdirectories) of the project to include in compiling

TARGET	= thebutton
MODULES	=  lib/mqtt/mqtt lib/libesphttpd/espfs lib/libesphttpd/core user 
CFLAGS	= -g -O2 -Os\
         -ggdb -std=c99 -Werror -Wpointer-arith -Wundef -Wall -Wl,-EL -fno-inline-functions \
		-nostdlib -mlongcalls -mtext-section-literals  -D__ets__ -DICACHE_FLASH -DGZIP_COMPRESSION\
		-Wno-address -DESPFS_POS=$(ESPFS_POS) -DESPFS_SIZE=$(ESPFS_SIZE) -DESPFS_HEATSHRINK -DGZIP_COMPRESSION\
		-Wno-error=comment -Wno-error=implicit-function-declaration
CFLAGS	= -g -O2 -Os\
		-Wl,-EL -Wpointer-arith -Wundef -Werror\
		-fno-inline-functions -nostdlib -mlongcalls -mtext-section-literals\
		-DESPFS_POS=$(ESPFS_POS) -DESPFS_SIZE=$(ESPFS_SIZE) -DESPFS_HEATSHRINK -DGZIP_COMPRESSION\
		-D__ets__ -DICACHE_FLASH -DOTA

EXTRA_INCDIR	= include lib/libesphttpd/include/ lib/mqtt/include/ lib/heatshrink/

# libraries used in this project, mainly provided by the SDK
LIBS		= c gcc hal phy pp net80211 lwip wpa upgrade main ssl

# compiler flags using during compilation of source files
CCFLAGS		+= -ffunction-sections -fno-jump-tables



# linker flags used to generate the main object file
LDFLAGS		= -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static -DICACHE_FLASH

#LDFLAGS		= -nostdlib -Wl,--no-check-sections -u call_user_start -Wl,-static -L$(SDK_EXTRA_LIBS)

# linker script used for the above linkier step
LD_SCRIPT		= eagle.app.v6.ld
LD_SCRIPT1      = eagle.app.v6.$(ESP_BOOT_VER).$(ESP_FLASH_SIZE).app1.ld
LD_SCRIPT2      = eagle.app.v6.$(ESP_BOOT_VER).$(ESP_FLASH_SIZE).app2.ld


# various paths from the SDK used in this project
SDK_LIBDIR	= lib
SDK_LDDIR	= ld
SDK_INCDIR	= include include/json


# we create two different files for uploading into the flash
# these are the names and options to generate them
FW_FILE_1	= 0x00000
FW_FILE_1_ARGS	= -bo $@ -bs .text -bs .data -bs .rodata -bc -ec
FW_FILE_2	= 0x40000
FW_FILE_2_ARGS	= -es .irom0.text $@ -ec
OTA_FW_FILE_1	= user1
OTA_FW_FILE_2	= user2
WEB_FW_FILE	= website


# we create two different files for uploading into the flash
# these are the names and options to generate them
#FW_FILE_1	= 0x00000
#FW_FILE_1_ARGS	= -bo $@ -bs .text -bs .data -bs .rodata -bc -ec
#FW_FILE_ARGS	= elf2image -o firmware/

#Intermediate files for User1.bin and User2.bin
FW_PT_1_OFF	= 0x00000
#OTA_FW_1_PT_1	= 0x01000
OTA_FW_1_PT_1_ARGS= -bo $(FW_PT_1) -bs .text -bs .data -bs .rodata -bc -ec

FW_PT_2_OFF	= 0x4000
OTA_FW_1_PT_2	= 0x11000
OTA_FW_1_PT_2_ARGS= -es .irom0.text $(FW_PT_2) -ec

OTA_FW_2_PT_1	= 0x41000
OTA_FW_2_PT_1_ARGS= -bo $(OTA_FW_2_PT_1) -bs .text -bs .data -bs .rodata -bc -ec

OTA_FW_2_PT_2	= 0x51000
OTA_FW_2_PT_2_ARGS= -es .irom0.text $(OTA_FW_2_PT_2) -ec

# select which tools to use as compiler, librarian and linker
CC		:= $(XTENSA_TOOLS_ROOT)/xtensa-lx106-elf-gcc
AR		:= $(XTENSA_TOOLS_ROOT)/xtensa-lx106-elf-ar
LD		:= $(XTENSA_TOOLS_ROOT)/xtensa-lx106-elf-gcc
OBJCOPY		:= $(XTENSA_TOOLS_ROOT)/xtensa-lx106-elf-objcopy

####
#### no user configurable options below here
####

FW_TOOL		?= $(ESPTOOL))

SRC_DIR		:= $(MODULES)
BUILD_DIR	:= $(addprefix $(BUILD_BASE)/,$(MODULES))
SDK_TOOLS	:= $(addprefix $(SDK_BASE)/,$(SDK_TOOLSDIR))
SDK_LIBDIR	:= $(addprefix $(SDK_BASE)/,$(SDK_LIBDIR))
SDK_INCDIR	:= $(addprefix -I$(SDK_BASE)/,$(SDK_INCDIR))
SDK_BIN		:= $(addprefix $(SDK_BASE)/,$(SDK_BIN))

SRC		:= $(foreach sdir,$(SRC_DIR),$(wildcard $(sdir)/*.c))
OBJ		:= $(patsubst %.c,$(BUILD_BASE)/%.o,$(SRC))
LIBS		:= $(addprefix -l,$(LIBS))
APP_AR		:= $(addprefix $(BUILD_BASE)/,$(TARGET)_app.a)
TARGET_OUT	:= $(addprefix $(BUILD_BASE)/,$(TARGET).out)
BOOTLOADER	:= $(addprefix $(SDK_BIN)/,$(BOOTLOADER))
BLANK		:= $(addprefix $(SDK_BIN)/,$(BLANK))

JOIN_TOOL	:= $(addprefix $(SDK_TOOLS)/,$(JOIN_TOOL))
APPGEN_TOOL	:= $(addprefix $(SDK_TOOLS)/,$(APPGEN_TOOL))
ESPTOOLPY	:= $(addprefix $(SDK_ROOT)/,$(ESPTOOL))
ESPTOOLPYARGS	?= -o $(addprefix $(BUILD_BASE)/,$(TARGET).out-)
LD_SCRIPT	:= $(addprefix -T$(SDK_BASE)/$(SDK_LDDIR)/,$(LD_SCRIPT))
LD_SCRIPT1	:= $(addprefix -T$(SDK_BASE)/$(SDK_LDDIR)/,$(LD_SCRIPT1))
LD_SCRIPT2	:= $(addprefix -T$(SDK_BASE)/$(SDK_LDDIR)/,$(LD_SCRIPT2))

INCDIR		:= $(addprefix -I,$(SRC_DIR))

EXTRA_INCDIR	:= $(addprefix -I,$(EXTRA_INCDIR))
MODULE_INCDIR	:= $(addsuffix /include,$(INCDIR))

FW_FILE_1	:= $(addprefix $(FW_BASE)/,$(FW_FILE_1).bin)
FW_FILE_2	:= $(addprefix $(FW_BASE)/,$(FW_FILE_2).bin)
OTA_FW_FILE_1	:= $(addprefix $(FW_BASE)/,$(OTA_FW_FILE_1).$(ESP_BOOT_VER).bin)
OTA_FW_FILE_2	:= $(addprefix $(FW_BASE)/,$(OTA_FW_FILE_2).$(ESP_BOOT_VER).bin)
WEB_FW_FILE	:= $(addprefix $(FW_BASE)/,$(WEB_FW_FILE).espfs)

FW_PT_1		:= $(addprefix $(BUILD_BASE)/,$(TARGET).out-$(FW_PT_1_OFF).bin)
FW_PT_2		:= $(addprefix $(BUILD_BASE)/,$(TARGET).out-$(FW_PT_2_OFF).bin)

BLANKER		:= $(addprefix $(SDK_BASE)/,bin/blank.bin)


V ?= $(VERBOSE)
ifeq ("$(V)","1")
Q :=
vecho := @true
else
Q := @
vecho := @echo
endif

ifdef DEBUG
CFLAGS := $(CFLAGS) -DDEBUG_VERSION=$(DEBUG)
endif

ifeq ("$(OTA)", "true")
CFLAGS := $(CFLAGS) -DOTA
endif

ifneq (,$findstring rawflash,$@)
	CURRVER	=	$(shell curl -s $(ESP_IPADDRESS)/getappver.cgi)
endif

vpath %.c $(SRC_DIR)

define compile-objects
$1/%.o: %.c
	$(vecho) "CC $$<"
	$(vecho) "$(Q) $(CC) $(INCDIR) $(MODULE_INCDIR) $(EXTRA_INCDIR) $(SDK_INCDIR) $(CFLAGS) -c $$< -o $$@"
	$(Q) $(CC) $(INCDIR) $(MODULE_INCDIR) $(EXTRA_INCDIR) $(SDK_INCDIR) $(CFLAGS)  -c $$< -o $$@
endef

.PHONY: all checkdirs clean

all: checkdirs $(TARGET_OUT) $(FW_FILE_1) $(FW_FILE_2) website

$(OTA_FW_FILE_1): OTA_USER1
$(OTA_FW_FILE_2): OTA_USER2

OTA_USER1: checkdirs $(TARGET_OUT)
	@$(OBJCOPY) --only-section .text -O binary $(TARGET_OUT)1 eagle.app.v6.text.bin
	@$(OBJCOPY) --only-section .data -O binary $(TARGET_OUT)1 eagle.app.v6.data.bin
	@$(OBJCOPY) --only-section .rodata -O binary $(TARGET_OUT)1 eagle.app.v6.rodata.bin
	@$(OBJCOPY) --only-section .irom0.text -O binary $(TARGET_OUT)1 eagle.app.v6.irom0text.bin
	@python $(APPGEN_TOOL) $(TARGET_OUT)1 $(BOOT_MODE) $(ESP_FLASH_MODE) $(ESP_FLASH_FREQ_DIV) $(ESP_SPI_SIZE)
	@rm -f eagle.app.v6.*
	
OTA_USER2: checkdirs $(TARGET_OUT)
	@$(OBJCOPY) --only-section .text -O binary $(TARGET_OUT)2 eagle.app.v6.text.bin
	@$(OBJCOPY) --only-section .data -O binary $(TARGET_OUT)2 eagle.app.v6.data.bin
	@$(OBJCOPY) --only-section .rodata -O binary $(TARGET_OUT)2 eagle.app.v6.rodata.bin
	@$(OBJCOPY) --only-section .irom0.text -O binary $(TARGET_OUT)2 eagle.app.v6.irom0text.bin
	@python $(APPGEN_TOOL) $(TARGET_OUT)2 $(BOOT_MODE) $(ESP_FLASH_MODE) $(ESP_FLASH_FREQ_DIV) $(ESP_SPI_SIZE)
	@rm -f eagle.app.v6.*

$(FW_FILE): $(TARGET_OUT)
	$(vecho) "FW $@"
	$(Q) $(FW_TOOL) $(FW_FILE_ARGS) $(TARGET_OUT) 

$(FW_FILE_1): FW_FILES
	$(vecho) "FW $@"
	@mv $(FW_PT_1) $(FW_FILE_1)

$(FW_FILE_2): FW_FILES
	$(vecho) "FW $@"
	@mv $(FW_PT_2) $(FW_FILE_2)
	
FW_FILES: checkdirs $(TARGET_OUT)
	$(Q) $(ESPTOOLPY) elf2image $(TARGET_OUT)

$(OTA_FW_FILE_1):
	$(vecho) "FW $@"
	@mv eagle.app.flash.bin $@

$(OTA_FW_FILE_2):
	$(vecho) "FW $@"
	@mv eagle.app.flash.bin $@

$(TARGET_OUT): $(APP_AR)
	$(vecho) "LD $@"
	$(Q) $(LD) -L$(SDK_LIBDIR) $(LD_SCRIPT) $(LDFLAGS) -Wl,--start-group $(LIBS) $(APP_AR) -Wl,--end-group -o $@
	$(Q) $(LD) -L$(SDK_LIBDIR) $(LD_SCRIPT1) $(LDFLAGS) -Wl,--start-group $(LIBS) $(APP_AR) -Wl,--end-group -o $@1
	$(Q) $(LD) -L$(SDK_LIBDIR) $(LD_SCRIPT2) $(LDFLAGS) -Wl,--start-group $(LIBS) $(APP_AR) -Wl,--end-group -o $@2

$(APP_AR): $(OBJ)
	$(vecho) "AR $@"
	$(Q) $(AR) cru $@ $^


mkespfsimage: lib/libesphttpd/espfs/mkespfsimage/
	$(Q) make -C lib/libesphttpd/espfs/mkespfsimage USE_HEATSHRINK="$(USE_HEATSHRINK)" GZIP_COMPRESSION="$(GZIP_COMPRESSION)"
	$(Q) mv lib/libesphttpd/espfs/mkespfsimage/mkespfsimage ./


hardresetflash:
	$(Q) $(PYTHON) $(ESPTOOL) -p $(ESPPORT) write_flash 0x7e000 $(BLANKER) 0x00000 $(BLANKER) 0x3c000 $(BLANKER) $(ESPFS_POS) $(BLANKER) 0x2c000 $(BLANKER)

resetflash:
	$(Q) $(PYTHON) $(ESPTOOL) -p $(ESPPORT) write_flash 0x00000 $(BLANKER) 0x3c000 $(BLANKER) 0x12000 $(BLANKER) 0x2c000 $(BLANKER)

blankflash:
	$(Q) $(PYTHON) $(ESPTOOL) --port $(ESPPORT) --baud $(ESPBAUD) write_flash 0x7E000 $(SDK_BASE)/bin/blank.bin
	
htmlflash: webpages.espfs
	if [ $$(stat -f '%z' webpages.espfs) -gt $$(( 0x2E000 )) ]; then echo "webpages.espfs too big!"; false; fi
	$(PYTHON) $(ESPTOOL) -p $(ESPPORT) write_flash 0x12000 webpages.espfs

test: flash
	$(vecho) screen $(ESPPORT) 115200
	
	
checkdirs: $(BUILD_DIR) $(FW_BASE)

$(BUILD_DIR):
	$(Q) mkdir -p $@

firmware:
	$(Q) mkdir -p $@
	
flash: $(FW_FILE_1) $(FW_FILE_2) website
	$(vecho) "Running..."
	$(Q) $(PYTHON) $(ESPTOOLPY) --baud $(ESPBAUD) --port $(ESPPORT) write_flash 0x00000 firmware/0x00000.bin $(ESPFS_POS) $(WEB_FW_FILE) 0x4000 firmware/0x4000.bin

cloud: $(OTA_FW_FILE_1) $(OTA_FW_FILE_2) website

flashcloud: cloud
	$(ESPTOOLPY) --baud $(ESPBAUD) --port $(ESPPORT) write_flash 0x00000 $(BOOTLOADER) 0x01000 $(OTA_FW_FILE_1) 0x41000 $(WEB_FW_FILE) 

website: html/ mkespfsimage
	$(vecho) "Building website..."
	$(Q) cd html; find . | ../mkespfsimage > ../$(WEB_FW_FILE); cd ..

rawflashhtml: website
	$(vecho) "Flashing Web Application..."
	$(Q) curl -i -X POST $(ESP_IPADDRESS)/flashraw.cgi --data-binary "@$(WEB_FW_FILE)"
	$(vecho)
	
rawflashapp: cloud
	$(vecho) -n "Flashing OTA User Application "
	$(Q) if [ $(CURRVER) -eq 1 ]; then echo 2; else echo 1; fi
	$(Q) if [ $(CURRVER) -eq 1 ]; then \
		curl -i -X POST $(ESP_IPADDRESS)/flashapp.cgi --data-binary "@$(OTA_FW_FILE_2)"; else \
		curl -i -X POST $(ESP_IPADDRESS)/flashapp.cgi --data-binary "@$(OTA_FW_FILE_1)"; fi
	@sleep 2
	$(vecho)

rawflashwait:
	$(vecho) "Waiting for device to finish rebooting..."
	$(Q) curl --connect-timeout 1000 -s $(ESP_IPADDRESS)/getappver.cgi
	$(vecho)
	
rawflash: rawflashapp rawflashwait rawflashhtml
	$(vecho) "Your device should be ready to go.  Enjoy!"

clean:	
	$(Q) rm -f $(APP_AR)
	$(Q) rm -f $(TARGET_OUT)
	$(Q) rm -rf $(BUILD_DIR)
	$(Q) rm -rf $(BUILD_BASE)
	$(Q) rm -f $(FW_FILE_1)
	$(Q) rm -f $(FW_FILE_2)
	$(Q) rm -rf $(FW_BASE)
	$(Q) rm -f mkespfsimage
	$(Q) rm -f $(WEB_FW_FILE)
	$(Q) rm -f lib/esphttpd/espfs/mkespfsimage/mkespfsimage
	$(Q) rm -f lib/esphttpd/espfs/mkespfsimage/*.o

$(foreach bdir,$(BUILD_DIR),$(eval $(call compile-objects,$(bdir))))
